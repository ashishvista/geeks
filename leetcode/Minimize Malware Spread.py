class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        self.visited = set()
        self.initialsColor = {}
        self.g = graph

        for u in initial:
            self.initialsColor[u] = -1

        self.componentsSize = {}
        color = 0

        for u in range(len(graph)):
            if u not in self.visited:
                size = [0]
                self.visited.add(u)
                self.componentsSize[color] = {"no_of_initial": 0, "size": 0}
                self.dfs(u, color, size)
                self.componentsSize[color]["size"] = size[0]
                color += 1

        print(self.componentsSize)
        print(self.initialsColor)

        result = initial[0]
        componentSize = float("-inf")
        for u in self.initialsColor:
            c = self.initialsColor[u]
            if self.componentsSize[c]["no_of_initial"] > 0 and self.componentsSize[c]["size"] > componentSize:
                result = u
                componentSize = self.componentsSize[c]["size"]
        return result

    def dfs(self, u, color, size):
        size[0] += 1
        if u in self.initialsColor:
            self.initialsColor[u] = color
            self.componentsSize[color]["no_of_initial"] += 1
        for v, vv in enumerate(self.g[u]):
            if vv == 1:
                if v not in self.visited:
                    self.visited.add(v)
                    self.dfs(v, color, size)
